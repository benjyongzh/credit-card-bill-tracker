name: Backend CI

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'server/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ "main", "develop" ]
    paths:
      - 'server/**'
      - '.github/workflows/backend.yml'

env:
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

jobs:
  backend-tests:
    name: Build and Test Spring Boot
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set shared BUILD_TAG
        run: |
          TAG=build-${{ github.run_number }}-${{ github.run_id }}
          echo "BUILD_TAG=$TAG" >> $GITHUB_ENV
          echo "VITE_BUILD_TAG=$TAG" >> $GITHUB_ENV
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Extract project metadata
        id: get_meta
        run: |
          echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> "$GITHUB_OUTPUT"
          echo "artifactId=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> "$GITHUB_OUTPUT"
          echo "groupId=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)" >> "$GITHUB_OUTPUT"
      - name: Build Spring Boot app
        run: mvn clean package -Dspring.profiles.active=ci
      - name: Rename JAR to include BUILD_TAG
        run: |
          mv target/${{ steps.get_meta.outputs.artifactId }}-${{ steps.get_meta.outputs.version }}.jar \
             target/${{ steps.get_meta.outputs.artifactId }}-${{ steps.get_meta.outputs.version }}-${{ env.BUILD_TAG }}.jar
      - name: Build Docker image
        run: docker build -f Dockerfile.app -t ${{ steps.get_meta.outputs.artifactId }}:${{ steps.get_meta.outputs.version }}-${{ env.BUILD_TAG }} .
      - name: Save Docker image
        run: docker save ${{ steps.get_meta.outputs.artifactId }}:${{ steps.get_meta.outputs.version }}-${{ env.BUILD_TAG }} -o ${{ steps.get_meta.outputs.artifactId }}-${{ steps.get_meta.outputs.version }}-${{ env.BUILD_TAG }}.tar
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_meta.outputs.artifactId }}-${{ steps.get_meta.outputs.version }}-${{ env.BUILD_TAG }}
          path: server/target/${{ steps.get_meta.outputs.artifactId }}-${{ steps.get_meta.outputs.version }}-${{ env.BUILD_TAG }}.jar
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_meta.outputs.artifactId }}-${{ steps.get_meta.outputs.version }}-${{ env.BUILD_TAG }}-docker-image
          path: server/${{ steps.get_meta.outputs.artifactId }}-${{ steps.get_meta.outputs.version }}-${{ env.BUILD_TAG }}.tar

  liquibase-validate:
    name: Validate Liquibase Changelogs + Generate SQL
    runs-on: ubuntu-latest
    needs: backend-tests
    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: liquibase
          POSTGRES_PASSWORD: liquibase
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=5
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Compile resources for Liquibase
        run: ./mvnw resources:resources
      - name: Run Liquibase validation
        run: |
          ./mvnw liquibase:validate \
            -Dspring.profiles.active=ci \
            -Dliquibase.changeLogFile=src/main/resources/db/changelog/db.changelog-master.xml \
            -Dliquibase.url=jdbc:postgresql://localhost:5432/testdb \
            -Dliquibase.username=liquibase \
            -Dliquibase.password=liquibase \
            -Dliquibase.driver=org.postgresql.Driver
      - name: Generate timestamped SQL file from changelogs
        run: |
          TIMESTAMP=$(date +%s)
          FILE_NAME="changelog-preview-${TIMESTAMP}.sql"
          ./mvnw liquibase:updateSQL \
            -Dspring.profiles.active=ci \
            -Dliquibase.changeLogFile=src/main/resources/db/changelog/db.changelog-master.xml \
            -Dliquibase.url=jdbc:postgresql://localhost:5432/testdb \
            -Dliquibase.username=liquibase \
            -Dliquibase.password=liquibase \
            -Dliquibase.driver=org.postgresql.Driver \
            > "$FILE_NAME"
          echo "file_name=$FILE_NAME" >> "$GITHUB_OUTPUT"
      - name: Upload Liquibase SQL Preview
        uses: actions/upload-artifact@v4
        with:
          name: liquibase-sql-preview
          path: server/changelog-preview-*.sql
