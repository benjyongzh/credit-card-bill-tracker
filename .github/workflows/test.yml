# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Testing CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

jobs:
  liquibase-validate:
    name: Validate Liquibase Changelogs + Generate SQL
    runs-on: ubuntu-latest
    needs: backend-tests
    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: liquibase
          POSTGRES_PASSWORD: liquibase
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Run Liquibase validation
        run: |
          ./mvnw liquibase:validate \
            -Dspring.profiles.active=ci
      - name: Generate timestamped SQL file from changelogs
        run: |
          TIMESTAMP=$(date +%s)
          FILE_NAME="changelog-preview-${TIMESTAMP}.sql"
          ./mvnw liquibase:updateSQL \
            -Dspring.profiles.active=ci \
            -Dliquibase.url=jdbc:postgresql://localhost:5432/testdb \
            -Dliquibase.username=liquibase \
            -Dliquibase.password=liquibase \
            -Dliquibase.driver=org.postgresql.Driver \
            > "$FILE_NAME"
          echo "file_name=$FILE_NAME" >> "$GITHUB_OUTPUT"
      - name: Upload Liquibase SQL Preview
        uses: actions/upload-artifact@v4
        with:
          name: liquibase-sql-preview
          path: server/changelog-preview-*.sql

  backend-tests:
    name: Build and Test Spring Boot
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Extract project metadata
        id: get_meta
        run: |
          echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> "$GITHUB_OUTPUT"
          echo "artifactId=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> "$GITHUB_OUTPUT"
          echo "groupId=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)" >> "$GITHUB_OUTPUT"
      - name: Build Spring Boot app
        run: mvn clean package -Dspring.profiles.active=ci
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_meta.outputs.artifactId }}-${{ steps.get_meta.outputs.version }}
          path: server/target/${{ steps.get_meta.outputs.artifactId }}-${{ steps.get_meta.outputs.version }}.jar
  frontend-build:
    name: Build React frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Extract frontend metadata
        id: get_frontend_meta
        run: |
          echo "version=$(jq -r .version package.json)" >> "$GITHUB_OUTPUT"
          echo "name=$(jq -r .name package.json)" >> "$GITHUB_OUTPUT"
      - name: Install dependencies
        run: npm ci
      - name: Build frontend
        run: npm run build
      - name: Zip build output
        run: zip -r ${{ steps.get_frontend_meta.outputs.name }}-${{ steps.get_frontend_meta.outputs.version }}.zip dist/
      - name: Upload build ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_frontend_meta.outputs.name }}-${{ steps.get_frontend_meta.outputs.version }}
          path: client/${{ steps.get_frontend_meta.outputs.name }}-${{ steps.get_frontend_meta.outputs.version }}.zip
